@using InventoryManagementSystemWeb.Components.Models
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IUserService UserService
@inject IInventoryService InventoryService
@inject ISupplierService SupplierService
@inject IProductService ProductService
@inject IAvailableProductService AvailableProductService
@inject IRestockingTransactionService RestockingTransactionService
@inject ISalesTransactionService SalesTransactionService
@inject ICustomerService CustomerService

<div class="entity-form">
    <EditForm Model="_salesTransactionModel" OnValidSubmit="HandleSubmit" FormName="SaleTransactionForm">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" />

        <div class="mb-3">
            <label for="customer" class="form-label">Customer</label>
            <InputSelect id="customer" class="form-control" @bind-Value="_salesTransactionModel.customerid">
                <option value="">Select Supplier</option>
                @foreach (var customer in _customerModels)
                {
                    <option value="@customer.id">@customer.name</option>
                }
            </InputSelect>
        </div>
        
        <div class="mb-3">
            <label for="totalcost" class="form-label">Total Cost</label>
            <InputNumber id="totalcost" class="form-control" @bind-Value="_salesTransactionModel.totalcost" placeholder="Total Cost" />
        </div>
        
        <div class="mb-3">
            <label class="form-label">Available Products</label>
            <div class="product-item">
                <label for="sku" class="form-label">Select SKU</label>
                <select id="sku" class="form-control" @bind="selectedSku">
                    <option value="">Select SKU</option>
                    @foreach (var prod in _availableProductModels)
                    {
                    <option value="@prod.sku">@prod.sku</option>
                    }
                </select>
                <button type="button" class="btn btn-secondary" @onclick="AddSku">Add SKU</button>
            </div>
            <div class="sku-list">
                @foreach (var sku in selectedSkus)
                {
                    <div class="product-item">
                        <label>SKU: @sku</label>
                        <button type="button" class="btn btn-danger btn-sm" @onclick="() => RemoveSku(sku)">Remove</button>
                    </div>
                }
            </div>
        </div>

        <button type="submit" class="btn btn-primary btn-block">Submit</button>
    </EditForm>

    @if (!string.IsNullOrEmpty(SuccessMessage))
    {
        <div class="alert alert-success mt-3">@SuccessMessage</div>
    }

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-danger mt-3">@ErrorMessage</div>
    }
</div>

<style>
    .entity-form {
        max-width: 400px;
        margin: 0 auto;
        padding: 20px;
        background-color: #f9f9f9;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    .form-label {
        color: #343a40;
        font-weight: bold;
        margin-bottom: 5px;
    }

    .form-control {
        padding: 10px;
        margin-bottom: 15px;
        border-radius: 4px;
        border: 1px solid #ced4da;
    }

    .btn-block {
        width: 100%;
        padding: 10px;
        font-size: 16px;
    }


    .form-label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: bold;
        color: #343a40;
    }

    #product-type {
        width: 100%;
        padding: 10px;
        font-size: 1rem;
        border: 1px solid #ced4da;
        border-radius: 4px;
        transition: border-color 0.3s ease;
    }

    #product-type:focus {
        border-color: #80bdff;
        outline: none;
        box-shadow: 0 0 5px rgba(0, 123, 255, 0.25);
    }

    .datalist {
        max-height: 150px;
        overflow-y: auto;
        border: 1px solid #ced4da;
        border-radius: 4px;
    }

    option {
        padding: 10px;
    }

    .alert {
        padding: 10px;
        border-radius: 4px;
    }

    .alert-success {
        background-color: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
    }

    .alert-danger {
        background-color: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
    }

    .product-item {
        margin-bottom: 10px;
    }

    .sku-list .product-item {
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .btn-sm {
        font-size: 0.8rem;
        padding: 5px 10px;
    }
</style>

@code {
    [Parameter]
    public List<CustomerModel> _customerModels { get; set; }

    [Parameter]
    public InventoryModel _Inventory { get; set; }

    private SalesTransactionModel _salesTransactionModel { get; set; }
    private List<AvailableProductModel> _availableProductModels { get; set; } = new List<AvailableProductModel>();


    private string? SuccessMessage;
    private string? ErrorMessage;
    private string selectedSku;
    private List<string> selectedSkus = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        _salesTransactionModel = new SalesTransactionModel();
        _availableProductModels = await AvailableProductService.GetAvailableProductsByInventoryId(_Inventory.Id);
    }

    private void AddSku()
    {
        if (!string.IsNullOrWhiteSpace(selectedSku) && !selectedSkus.Contains(selectedSku))
        {
            selectedSkus.Add(selectedSku);
            selectedSku = string.Empty;

        }

        StateHasChanged();
    }

    private void RemoveSku(string sku)
    {
        selectedSkus.Remove(sku);
    }
    

    private async Task HandleSubmit()
    {
        try
        {
            if (selectedSkus.Any())
            {
                _salesTransactionModel.skus = selectedSkus;
                var response = await SalesTransactionService.AddSalesTransaction(_salesTransactionModel);
                
                SuccessMessage = "Sale transaction created successfully!";
                ErrorMessage = null;
            }
            else
            {
                SuccessMessage = null;
                ErrorMessage = "Please add skus!";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred: {ex.Message}";
            SuccessMessage = null;
        }
    }
}
