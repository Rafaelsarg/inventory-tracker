@using InventoryManagementSystemWeb.Components.Models
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IUserService UserService
@inject IInventoryService InventoryService
@inject IProductService ProductService
@inject IProductTypeService ProductTypeService
@inject ISupplierService SupplierService
@inject IRestockingTransactionService RestockingTransactionService
@inject ISalesTransactionService SalesTransactionService
@inject ICustomerService CustomerService
@rendermode InteractiveServer

<div class="header-section">
    <h3>@_inventoryModel.Name</h3>
    <div class="action-buttons">
        <button class="btn" @onclick="AddCustomer">Add Customer</button>
        <button class="btn" @onclick="SellProduct">Sell Product</button>
    </div>
</div>

<div class="toggle-section">
    <button class="btn toggle-btn" @onclick="ToggleView">Show @((_isViewingCustomers) ? "Sale Transactions" : "Customer")</button>
</div>

<!-- Conditionally render the list based on toggle state -->
@if (_isViewingCustomers)
{
<div class="list-section">
    <h4>Customers</h4>
    <ul>
        @foreach (var customer in _customers)
        {
            <li>
                <span>@customer.name - @customer.contactinfo</span>
                <button class="btn btn-danger btn-sm" @onclick="() => DeleteCustomer(customer.id)">Delete</button>
            </li>
        }
    </ul>
</div>
}
else
{
<div class="list-section">
    <h4>Sale Transactions</h4>
    <ul>
        @foreach (var transaction in _salesTransactions)
        {
            <li>
                <span>@transaction.restockingdate.ToShortDateString() - Total Cost: @transaction.totalcost</span>
                <button class="btn btn-danger btn-sm" @onclick="() => DeleteTransaction(transaction.id)">Delete</button>
                
            </li>
        }
    </ul>
</div>
}

@if (isCustomerPopupVisible)
{
<div class="popup_overlay" @onclick="CloseAndRefreshProductTypes">
    <div class="popup_window" @onclick:stopPropagation="true">
        <h3>Add Supplier</h3>
        <AddCustomerForm _inventory="_inventoryModel" />
        <button class="close_button" @onclick="CloseAndRefreshProductTypes">Close</button>
    </div>
</div>
}
@if (isSalesPopupVisible)
{
    <div class="popup_overlay" @onclick="CloseAndRefreshProductTypes">
        <div class="popup_window" @onclick:stopPropagation="true">
            <h3>Add Restock</h3>
            <AddSaleForm _customerModels="_customers" _Inventory="_inventoryModel"/>
            <button class="close_button" @onclick="CloseAndRefreshProductTypes">Close</button>
        </div>
    </div>
}

<style>
    .header-section {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

    .action-buttons {
        display: flex;
        gap: 10px;
    }

    .btn {
        background-color: #28a745;
        color: white;
        border: none;
        border-radius: 4px;
        padding: 8px 12px;
        cursor: pointer;
    }

    .btn:hover {
        background-color: #218838;
    }

    .product-form {
        display: flex;
        align-items: center;
        gap: 10px; /* Space between each item */
    }

    .toggle-section {
        margin-bottom: 20px;
    }

    .list-section ul {
        list-style: none;
        padding: 0;
    }

    .list-section ul li {
        background-color: #f1f1f1;
        margin-bottom: 10px;
        padding: 10px;
        border-radius: 4px;
    }
    
    .product-form label {
        margin-right: 5px;
        font-weight: bold;
    }

    .product-form input,
    .product-form button {
        padding: 8px 12px;
        border-radius: 4px;
        border: 1px solid #ccc;
    }

    .product-form button {
        background-color: #007bff;
        color: white;
        border: none;
        cursor: pointer;
    }

    .product-form button:hover {
        background-color: #0056b3;
    }
    /* Popup styling */
    .popup_overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .popup_window {
        background-color: #fff;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        min-width: 300px;
        max-width: 90%;
    }

    .close_button {
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 4px;
        padding: 5px 10px;
        cursor: pointer;
        margin-top: 10px;
    }

    .close_button:hover {
        background-color: #0056b3;
    }
</style>

@code {
    [Parameter] public InventoryModel _inventoryModel { get; set; }

    private List<CustomerModel> _customers { get; set; } = new List<CustomerModel>();
    private List<SalesTransactionModel> _salesTransactions { get; set; }


    private bool _isViewingCustomers = true;
    private bool isCustomerPopupVisible = false;
    private bool isSalesPopupVisible = false;

    protected override async Task OnInitializedAsync()
    {

        _customers = await CustomerService.GetCustomersByInventoryId(_inventoryModel.Id);
        _salesTransactions = new List<SalesTransactionModel>();
        if (_customers.Any())
        {
            foreach (var cus in _customers)
            {
                var _salesTransactionLs = await SalesTransactionService.GetSalesTransactionsBySupplierId(cus.id);
                _salesTransactions.AddRange(_salesTransactionLs);
            }
        }
    }

    private void ToggleView()
    {
        _isViewingCustomers = !_isViewingCustomers; // Toggle between suppliers and restocking transactions
    }


    private async Task CloseAndRefreshProductTypes()
    {
        isCustomerPopupVisible = false;
        isSalesPopupVisible = false;

        // Re-fetch the product types
        _customers = await CustomerService.GetCustomersByInventoryId(_inventoryModel.Id);
        _salesTransactions = new List<SalesTransactionModel>();
        if (_customers.Any())
        {
            foreach (var cus in _customers)
            {
                var _salesTransactionLs = await SalesTransactionService.GetSalesTransactionsBySupplierId(cus.id);
                _salesTransactions.AddRange(_salesTransactionLs);
            }
        }
        // Trigger UI update
        StateHasChanged();
    }

    private async Task DeleteCustomer(int customerId)
    {
        var response = await CustomerService.DeleteCustomer(customerId);

        if (response)
        {
            _customers = await CustomerService.GetCustomersByInventoryId(_inventoryModel.Id);
            StateHasChanged();
        }
    }

    private async Task DeleteTransaction(int transactionId)
    {
        var response = await SalesTransactionService.DeleteTransaction(transactionId);
        _salesTransactions = new List<SalesTransactionModel>();
        if (_customers.Any())
        {
            foreach (var cus in _customers)
            {
                var _salesTransactionLs = await SalesTransactionService.GetSalesTransactionsBySupplierId(cus.id);
                _salesTransactions.AddRange(_salesTransactionLs);
            }
        }
        // Trigger UI update
        StateHasChanged();
        
    }
    
    private void AddCustomer()
    {
        // Logic to add a new product type
        isCustomerPopupVisible = true;
    }
    
    private void SellProduct()
    {
        // Logic to add a new product type
        isSalesPopupVisible = true;
    }
    
}