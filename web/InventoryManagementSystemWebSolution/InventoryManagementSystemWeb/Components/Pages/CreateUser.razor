@page "/create-user"
@inject IUserService UserService
@inject NavigationManager Navigation
@rendermode InteractiveServer
@using Models



@if (!string.IsNullOrEmpty(CreateMessage))
{
    <div class="alert alert-danger">@CreateMessage</div>
}

@if (!string.IsNullOrEmpty(SuccessMessage))
{
    <div class="alert alert-success">@SuccessMessage</div>
}

<body>
    <div class="container">
        <div class="create-user-form">
            <EditForm Model="_newUserModel" OnValidSubmit="HandleCreateUser" FormName="UserCreateForm">
                <DataAnnotationsValidator/>
                <ValidationSummary class="text-danger"/>

                <div class="mb-3">
                    <label for="firstName" class="form-label">First Name</label>
                    <InputText id="firstName" class="form-control" type="text" @bind-Value="_newUserModel!.firstName" placeholder="Enter your first name"/>

                </div>

                <div class="mb-3">
                    <label for="lastName" class="form-label">Last Name</label>
                    <InputText id="lastName" class="form-control" @bind-Value="_newUserModel!.lastName" placeholder="Enter your last name"/>
                </div>

                <div class="mb-3">
                    <label for="email" class="form-label">Email Address</label>
                    <InputText id="email" type="email" class="form-control" @bind-Value="_newUserModel.emailAddress" placeholder="Enter your email"/>
                </div>

                <div class="mb-3">
                    <label for="password" class="form-label">Password</label>
                    <InputText id="password" type="password" class="form-control" @bind-Value="_newUserModel.password" placeholder="Enter your password"/>
                </div>

                <button type="submit" class="btn btn-primary btn-block">Create User</button>
            </EditForm>
            
            <div class="login-link">
                <a href="/">Already have an account? Move to login page.</a>
            </div>
        </div>
    </div>
</body>

<style>
    body, html {
        margin: 0;
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        font-family: Arial, sans-serif;
        background-color: #f0f2f5;
    }

    .container {
        display: flex;
        justify-content: center; 
        flex-direction: column;
        align-items: center; 
        height: 100vh;
        padding: 20px;
    }

    .create-user-form {
        width: 100%;
        max-width: 400px; 
        padding: 20px;
        background-color: #f9f9f9; 
        border-radius: 8px; 
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1); 
        border: 1px solid #e0e0e0;
    }

    .create-user-form .form-label {
        font-weight: bold; /* Emphasize labels */
        color: #333; /* Darker color for better readability */
    }

    .create-user-form .form-control {
        padding: 10px; /* More padding inside input fields for better usability */
        border-radius: 5px; /* Slightly rounded input fields */
        border: 1px solid #ccc; /* Light gray border */
        margin-bottom: 15px;
        transition: border-color 0.3s; /* Smooth transition on focus */
    }

    .create-user-form .form-control:focus {
        border-color: #007bff; /* Blue border on focus for a better user experience */
        box-shadow: 0 0 5px rgba(0, 123, 255, 0.25); /* Subtle shadow on focus */
        outline: none; /* Remove default outline */
    }

    .create-user-form .btn-block {
        width: 100%; /* Make the button full width */
        padding: 10px; /* Increased padding for a more substantial button */
        background-color: #007bff; /* Primary blue color for the button */
        color: #fff; /* White text for contrast */
        font-weight: bold; /* Bold text for emphasis */
        border: none; /* Remove default border */
        border-radius: 5px; /* Rounded corners for the button */
        cursor: pointer; /* Pointer cursor on hover */
        transition: background-color 0.3s, box-shadow 0.3s; /* Smooth transition on hover */
    }

    .create-user-form .btn-block:hover {
        background-color: #0056b3; /* Darker blue on hover */
        box-shadow: 0 4px 10px rgba(0, 91, 187, 0.2); /* Add shadow on hover for depth */
    }

    .login-link {
        text-align: center;
        margin-top: 1rem;
        font-size: 0.9rem; /* Smaller text for the link */
        color: #007bff; /* Matching link color to the primary button */
    }

    .login-link a {
        text-decoration: none;
        color: inherit;
    }

    .login-link a:hover {
        text-decoration: underline;
    }
</style>

@code {
    public NewUserModel _newUserModel;
    
    private string? CreateMessage;
    private string? SuccessMessage;
    
    
    protected override void OnInitialized()
    {
        _newUserModel = new NewUserModel();
    }
    
    private async Task HandleCreateUser()
    {
        try
        {
            var createResponse = await UserService.CreateUserAsync(_newUserModel);

            if (createResponse.IsSuccess)
            {
                SuccessMessage = "User created successfully!";
                CreateMessage = null;
                Navigation.NavigateTo("/");
            }
            else
            {
                CreateMessage = createResponse.ErrorMessage ?? "Failed to create user.";
                SuccessMessage = null;
            }
        }
        catch (Exception ex)
        {
            CreateMessage = $"An error occurred: {ex.Message}. Please try again.";
            SuccessMessage = null;
            Console.WriteLine(ex.Message);
        }
    }

}
