@using InventoryManagementSystemWeb.Components.Models
@inject IUserService UserService
@inject IProductTypeService ProductTypeService
@inject IProductService ProductService
@rendermode InteractiveServer

<div class="entity-form">
    @if (entityType == "Product")
    {
    <EditForm Model="productModel" OnValidSubmit="HandleProductSubmit" FormName="ProductForm">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" />

        <div class="mb-3">
            <label for="productType" class="form-label">Product Type</label>
            <InputSelect id="productType" class="form-control" @bind-Value="productModel.producttypeid">
                <option value="">Select a product type</option>
                @foreach (var productType in productTypes)
                {
                <option value="@productType.id">@productType.name</option>
                }
            </InputSelect>
        </div>

        <div class="mb-3">
            <label for="name" class="form-label">Product Name</label>
            <InputText id="name" class="form-control" @bind-Value="productModel.name" placeholder="Name" />
        </div>
        
        <button type="submit" class="btn btn-primary btn-block">Submit</button>
    </EditForm>
    }
    else if (entityType == "Product Type")
    {
    <EditForm Model="productTypeModel" OnValidSubmit="HandleProductTypeSubmit" FormName="ProductTypeForm">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" />

        <div class="mb-3">
            <label for="name" class="form-label">Product Type Name</label>
            <InputText id="name" class="form-control" @bind-Value="productTypeModel.name" placeholder="Name" />
        </div>
        

        <button type="submit" class="btn btn-primary btn-block">Submit</button>
    </EditForm>
    }

    @if (!string.IsNullOrEmpty(SuccessMessage))
    {
    <div class="alert alert-success mt-3">@SuccessMessage</div>
    }

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
    <div class="alert alert-danger mt-3">@ErrorMessage</div>
    }
</div>

<style>
    .entity-form {
        max-width: 400px;
        margin: 0 auto;
        padding: 20px;
        background-color: #f9f9f9;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    .form-label {
        color: #343a40;
        font-weight: bold;
        margin-bottom: 5px;
    }

    .form-control {
        padding: 10px;
        margin-bottom: 15px;
        border-radius: 4px;
        border: 1px solid #ced4da;
    }

    .btn-block {
        width: 100%;
        padding: 10px;
        font-size: 16px;
    }

    .alert {
        padding: 10px;
        border-radius: 4px;
    }

    .alert-success {
        background-color: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
    }

    .alert-danger {
        background-color: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
    }
</style>

@code {
    [Parameter]
    public string entityType { get; set; } // "Product" or "Product Type"

    [Parameter]
    public InventoryModel _inventory { get; set; }

    private ProductModel productModel = new ProductModel();
    private ProductTypeModel productTypeModel = new ProductTypeModel();
    private List<ProductTypeModel> productTypes = new List<ProductTypeModel>();
    private string? SuccessMessage;
    private string? ErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        if (entityType == "Product")
        {

            // Fetch product types based on inventory id
            productTypes = await ProductTypeService.GetProductTypesByInventoryId(_inventory.Id);
        }
        else if (entityType == "Product Type")
        {
            productTypeModel.inventoryid = _inventory.Id;
        }
    }

    private async Task HandleProductSubmit()
    {
        var response = await ProductService.AddProduct(productModel);

        if (response != null)
        {
            SuccessMessage = "Product created successfully!";
            ErrorMessage = null;
        }
        else
        {
            ErrorMessage = "Failed to create product";
            SuccessMessage = null;
        }
    }

    private async Task HandleProductTypeSubmit()
    {
        
        var response = await ProductTypeService.AddProductType(productTypeModel);

        if (response != null)
        {
            SuccessMessage = "Product Type created successfully!";
            ErrorMessage = null;
        }
        else
        {
            ErrorMessage = "Failed to create product type";
            SuccessMessage = null;
        }
    }
}
