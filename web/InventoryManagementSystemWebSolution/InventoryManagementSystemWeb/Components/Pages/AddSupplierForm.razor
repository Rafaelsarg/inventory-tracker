@using InventoryManagementSystemWeb.Components.Models
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IUserService UserService
@inject IInventoryService InventoryService
@inject IProductService ProductService
@inject IProductTypeService ProductTypeService
@inject ISupplierService SupplierService
@rendermode InteractiveServer

<div class="entity-form">
    <EditForm Model="_supplierModel" OnValidSubmit="HandleSubmit" FormName="ProductTypeForm">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" />
        <div class="mb-3">
            <label for="name" class="form-label">Supplier Name</label>
            <InputText id="name" class="form-control" @bind-Value="_supplierModel.name" placeholder="Name" />
        </div>
        <div class="mb-3">
            <label for="contactInformation" class="form-label">Contact Information</label>
            <InputText id="contactInformation" class="form-control" @bind-Value="_supplierModel.contactinfo" placeholder="Contact Info" />
        </div>
        <button type="submit" class="btn btn-primary btn-block">Submit</button>
    </EditForm>

    @if (!string.IsNullOrEmpty(SuccessMessage))
    {
    <div class="alert alert-success mt-3">@SuccessMessage</div>
    }

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
    <div class="alert alert-danger mt-3">@ErrorMessage</div>
    }
</div>

<style>
    .entity-form {
        max-width: 400px;
        margin: 0 auto;
        padding: 20px;
        background-color: #f9f9f9;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    .form-label {
        color: #343a40;
        font-weight: bold;
        margin-bottom: 5px;
    }

    .form-control {
        padding: 10px;
        margin-bottom: 15px;
        border-radius: 4px;
        border: 1px solid #ced4da;
    }

    .btn-block {
        width: 100%;
        padding: 10px;
        font-size: 16px;
    }

    .alert {
        padding: 10px;
        border-radius: 4px;
    }

    .alert-success {
        background-color: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
    }

    .alert-danger {
        background-color: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
    }
</style>

@code {
    [Parameter]
    public InventoryModel _inventory { get; set; }

    private SupplierModel _supplierModel { get; set; }
    private string? SuccessMessage;
    private string? ErrorMessage;
    
    protected override async Task OnInitializedAsync()
    {
        _supplierModel = new SupplierModel();
    }

    private async Task HandleSubmit()
    {
        _supplierModel.inventoryid = _inventory.Id;
        var response = await SupplierService.AddSupplier(_supplierModel);

        if (response != null)
        {
            SuccessMessage = "Supplier created successfully!";
            ErrorMessage = null;
        }
        else
        {
            ErrorMessage = "Failed to create supplier";
            SuccessMessage = null;
        }
    }
}