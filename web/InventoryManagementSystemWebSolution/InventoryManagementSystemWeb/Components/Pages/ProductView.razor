@using InventoryManagementSystemWeb.Components.Models
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IUserService UserService
@inject IInventoryService InventoryService
@inject IProductService ProductService
@inject IProductTypeService ProductTypeService
@inject IAvailableProductService AvailableProductService
@rendermode InteractiveServer

<div class="header-section">
    <h3>@_inventoryModel.Name</h3>
    <div class="action-buttons">
        <button class="btn" @onclick='() => ShowPopup("Product Type")'>Add Product Type</button>
        <button class="btn" @onclick='() => ShowPopup("Product")'>Add Product Name</button>
    </div>
</div>

<div class="product-form">
    <div>
        <label for="product-type">Product Type:</label>
        <input list="product-types" id="product-type" @onchange="OnProductTypeChanged" placeholder="Select or type a product type" />
        <datalist id="product-types">
            @foreach (var type in productTypes)
            {
                <option value="@type.name"></option>
            }
        </datalist>
    </div>

    <div>
        <label for="product-name">Product Name:</label>
        <input list="product-names" id="product-name" @onchange="OnProductChange" placeholder="Enter product name">
        <datalist id="product-names">
            @foreach (var product in products)
            {
                <option value="@product.name"></option>
            }
        </datalist>
    </div>
     
    <div>
        <button @onclick="HandleSubmit">Submit</button>
    </div>
</div>

@if (popUpVisible)
{
    <div class="popup_overlay" @onclick="CloseAndRefreshProductTypes">
        <div class="popup_window" @onclick:stopPropagation="true">
            <h3>Add @popUpType</h3>
            <AddProductInfo entityType="@popUpType" _inventory="_inventoryModel" />
            <button class="close_button" @onclick="CloseAndRefreshProductTypes">Close</button>
        </div>
    </div>
}

@if (skuNumbers != null && skuNumbers.Any())
{
    <div class="sku-list">
        <h4>Available products for @selectedProduct.name:</h4>
        <ul>
            @foreach (var sku in skuNumbers)
            {
                <li>@sku</li>
            }
        </ul>
    </div>
}

<style>
    .header-section {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

    .action-buttons {
        display: flex;
        gap: 10px;
    }

    .btn {
        background-color: #28a745;
        color: white;
        border: none;
        border-radius: 4px;
        padding: 8px 12px;
        cursor: pointer;
    }

    .btn:hover {
        background-color: #218838;
    }

    .product-form {
        display: flex;
        align-items: center;
        gap: 10px; /* Space between each item */
    }

    .product-form label {
        margin-right: 5px;
        font-weight: bold;
    }

    .product-form input,
    .product-form button {
        padding: 8px 12px;
        border-radius: 4px;
        border: 1px solid #ccc;
    }

    .product-form button {
        background-color: #007bff;
        color: white;
        border: none;
        cursor: pointer;
    }

    .product-form button:hover {
        background-color: #0056b3;
    }

    .sku-list {
        margin-top: 20px;
        padding: 20px;
        background-color: #f9f9f9; 
        border-radius: 8px; 
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1); 
    }

    .sku-list h4 {
        margin-bottom: 15px;
        font-size: 1.5em;
        font-weight: bold;
        color: #333; 
        border-bottom: 2px solid #007bff; 
        padding-bottom: 5px;
    }

    .sku-list ul {
        list-style-type: none;
        padding: 0;
        margin: 0;
    }

    .sku-list li {
        background-color: darkgrey; 
        color: white; 
        padding: 10px 15px;
        margin-bottom: 10px;
        border-radius: 5px;
        transition: background-color 0.3s ease; 
    }

    .sku-list li:hover {
        background-color: #0056b3; 
        cursor: pointer;
    }

    /* Popup styling */
    .popup_overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .popup_window {
        background-color: #fff;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        min-width: 300px;
        max-width: 90%;
    }

    .close_button {
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 4px;
        padding: 5px 10px;
        cursor: pointer;
        margin-top: 10px;
    }

    .close_button:hover {
        background-color: #0056b3;
    }
</style>

@code {
    [Parameter]
    public InventoryModel _inventoryModel { get; set; }

    private ProductTypeModel selectedProductType;
    private ProductModel selectedProduct;
    private List<ProductTypeModel> productTypes = new List<ProductTypeModel>();
    private List<ProductModel> products = new List<ProductModel>();
    private List<AvailableProductModel> avproducts = new List<AvailableProductModel>();
    private CancellationTokenSource cts = new CancellationTokenSource();
    private List<string> skuNumbers = new List<string>();

    private bool popUpVisible = false;
    private string popUpType = "";

    protected override async Task OnInitializedAsync()
    {
        cts.Cancel();
        cts = new CancellationTokenSource();

        // Fetch product types using the ProductTypeService
        productTypes = await ProductTypeService.GetProductTypesByInventoryId(_inventoryModel.Id);
    }

    private void ShowPopup(string type)
    {
        popUpType = type;
        popUpVisible = true;
    }

    private async Task CloseAndRefreshProductTypes()
    {
        popUpVisible = false;
        
        // Re-fetch the product types
        productTypes = await ProductTypeService.GetProductTypesByInventoryId(_inventoryModel.Id);

        // Trigger UI update
        StateHasChanged();
    }

    private async Task OnProductTypeChanged(ChangeEventArgs e)
    {
        string selectedTypeName = e.Value?.ToString();

        selectedProductType = productTypes.FirstOrDefault(pt => pt.name == selectedTypeName);

        if (selectedProductType != null)
        {
            // Fetch products using the ProductService
            products = await ProductService.GetProductsByProductTypeId(selectedProductType.id);
        }
        else
        {
            products.Clear();
        }
    }

    private async Task OnProductChange(ChangeEventArgs e)
    {
        string selectedProductName = e.Value?.ToString();

        selectedProduct = products.FirstOrDefault(p => p.name == selectedProductName);
    }

    private async Task HandleSubmit()
    {
        if (selectedProductType != null && selectedProduct != null)
        {
            skuNumbers = new List<string>();
            Console.WriteLine($"Product Type: {selectedProductType.name}, Product Name: {selectedProduct.name}");

            // Fetch SKUs using the AvailableProductService
            avproducts = await AvailableProductService.GetAvailableProductsByProductId(selectedProduct.id);

            foreach (var inst in avproducts)
            {
                skuNumbers.Add(inst.sku);
            }
        }
        else
        {
            Console.WriteLine("Please select a product type and product.");
        }
    }
}
